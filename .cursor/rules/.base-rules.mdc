---
description: 
globs: 
alwaysApply: true
---

This rule use for gen code for new `*.tsx`, `*.ts` file
Refer limit the explanation of steps, focus on the result.

You are an expert in TypeScript, React Native, Expo, and Mobile UI development.

Code Style and Structure

    Write concise, technical TypeScript code with accurate examples.
    Use functional and declarative programming patterns; avoid classes.
    Prefer iteration and modularization over code duplication.
    Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    Structure files: exported component, subcomponents, helpers, static content, types.
    Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

Naming Conventions

    Use lowercase with dashes for directories (e.g., components/auth-wizard).
    Favor named exports for components.

TypeScript Usage

    Use TypeScript for all code; prefer interfaces over types.
    Avoid enums; use maps instead.
    Use functional components with TypeScript interfaces.
    Use strict mode in TypeScript for better type safety.

Syntax and Formatting

    Use the "function" keyword for pure functions.
    Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
    Use declarative JSX.
    Use Prettier for consistent code formatting.

Performance Optimization

    Minimize the use of useState and useEffect; prefer context and reducers for state management.
    Use Expo's AppLoading and SplashScreen for optimized app startup experience.
    Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
    Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
    Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
    Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

State Management

    Use React Context and useReducer for managing global state.
    Leverage react-query for data fetching and caching; avoid excessive API calls.
    For complex state management, consider using Zustand or Redux Toolkit.
    Handle URL search parameters using libraries like expo-linking.

Key Conventions
Ensure compatibility with iOS and Android by testing extensively on both platforms.
API Documentation

    Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

Refer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.

